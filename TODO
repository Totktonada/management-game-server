==== Ближние планы ====

* Написать help'ы по командам.

* perror("syscall"); // not "syscall()"

* Звёздочки указателей отдельно от названий переменных/функций и отдельно от
* имени указуемого типа.

* Сообщение для нового клиента: идёт ли игра, сколько осталось до начала, если
* не идёт. Список подключённых клиентов (как по команде clients).

* Корректно обработать переполнение количества денег у игрока.

==== Дальние планы ====

* IPv6.

* Клиент с readline.

* UTF-8.

* gettext.

* Сокращения для команд. Любая последовательность символов, с которой может
* начинаться строго одна команда должна интерпретироваться как эта команда.

* Ловить ошибки write? (-1 или возвр. знач. != кол-ву байт, которое я хочу
* передать). select для write.

* Нормальные логи: подключение клиента, отключение (с причиной), получение
* команды от клиента такого-то. Возможно, openlog, syslog, closelog. Есть
* вариант ведения логов сообщений, отправляемых клиентам, через «msg_»-функции
* (вызывать из низ функцию логгирования). Либо перед выполнением write делать
* запись в лог содержимого буфера для данного клиента.

* Параметры командной строки: демонизироваться ли, куда писать лог-файл.

* cmd [--help | -h | -?]

* Статистика по раундам.

* Параметр: минимальное число игроков для начала раунда.

* 2/4 сырья?

* Гарантировать невыход значений переменных за границы sint/uint. Думаю, будет
* достаточно контроллировать величину player->money. Остальные величины вряд ли
* переполнятся раньше денег из-за ежемесячных издержек. Посмотреть в сторону
* saturated arithmetic.
